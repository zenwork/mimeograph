{"version":3,"sources":["webpack:///./node_modules/lit-html/lib/modify-template.js","webpack:///./node_modules/lit-html/lib/shady-render.js","webpack:///./node_modules/@polymer/lit-element/lib/updating-element.js","webpack:///./node_modules/@polymer/lit-element/lib/decorators.js","webpack:///./node_modules/@polymer/lit-element/lit-element.js","webpack:///./node_modules/lit-html/lib/default-template-processor.js","webpack:///./node_modules/lit-html/lit-html.js","webpack:///./node_modules/lit-html/lib/template.js","webpack:///./node_modules/lit-html/lib/part.js","webpack:///./node_modules/lit-html/lib/dom.js","webpack:///./node_modules/lit-html/lib/parts.js","webpack:///./node_modules/lit-html/lib/template-result.js","webpack:///./node_modules/lit-html/lib/template-factory.js","webpack:///./node_modules/lit-html/lib/directive.js","webpack:///./node_modules/lit-html/lib/render.js","webpack:///./node_modules/lit-html/lib/template-instance.js"],"names":["walkerNodeFilter","NodeFilter","SHOW_ELEMENT","SHOW_COMMENT","SHOW_TEXT","removeNodesFromTemplate","template","nodesToRemove","element","content","parts","walker","document","createTreeWalker","partIndex","nextActiveIndexInTemplateParts","part","nodeIndex","removeCount","nodesToRemoveInTemplate","currentRemovingNode","nextNode","node","currentNode","previousSibling","has","push","undefined","index","forEach","n","parentNode","removeChild","countNodes","count","nodeType","Node","DOCUMENT_FRAGMENT_NODE","startIndex","i","length","Object","lib_template","getTemplateCacheKey","type","scopeName","compatibleShadyCSSVersion","window","ShadyCSS","prepareTemplateDom","console","warn","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","createElement","style","textContent","templates","template_factory","get","Array","from","s","removeStylesFromLitTemplates","refNode","appendChild","insertCount","walkerIndex","insertBefore","insertNodeIntoTemplate","firstChild","nativeShadow","querySelector","cloneNode","removes","fromBooleanAttribute","value","toBooleanAttribute","notEqual","old","defaultPropertyDeclaration","attribute","String","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING","UpdatingElement","HTMLElement","[object Object]","super","this","_updateState","_instanceProperties","_updatePromise","_changedProperties","Map","_reflectingProperties","initialize","observedAttributes","_finalize","attributes","p","v","_classProperties","attr","_attributeNameForProperty","_attributeToPropertyMap","set","name","options","hasOwnProperty","superProperties","getPrototypeOf","k","prototype","key","Symbol","defineProperty","oldValue","_requestPropertyUpdate","configurable","enumerable","_finalized","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","toLowerCase","fromAttribute","Boolean","toAttribute","renderRoot","createRenderRoot","_saveInstanceProperties","constructor","attachShadow","mode","styleElement","requestUpdate","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","removeAttribute","setAttribute","propName","_propertyValueFromAttribute","_invalidate","_valueHasChanged","updateComplete","_hasRequestedUpdate","resolver","previousValidatePromise","r","_validate","_applyInstanceProperties","shouldUpdate","changedProperties","update","_markUpdated","firstUpdated","updated","size","_propertyToAttribute","_query","target","selector","queryFn","proto","__webpack_require__","d","__webpack_exports__","lit_element_LitElement","lit_html","templateResult","render","localName","eventContext","result","container","hasRendered","assign","templateFactory","cacheKey","templateCache","strings","getTemplateElement","shadyTemplateFactory","ShadowRoot","template_result","instance","host","defaultTemplateProcessor","prefix","slice","html","template_instance","dom","directive","values","marker","nodeMarker","rewritesStyleAttribute","Template","isTemplatePartActive","createMarker","lastAttributeNameRegex","Math","random","markerRegex","RegExp","el","getAttribute","_prepareTemplate","previousNode","hasAttributes","indexOf","stringForPart","exec","attributeLookupName","test","split","tagName","nodeValue","parent","lastIndex","createTextNode","TEXT_NODE","nextSibling","createComment","noChange","isCEPolyfill","reparentNodes","removeNodes","customElements","polyfillWrapFlushCallback","start","end","before","startNode","endNode","AttributeCommitter","NodePart","BooleanAttributePart","PropertyCommitter","EventPart","_directive_js__WEBPACK_IMPORTED_MODULE_0__","_dom_js__WEBPACK_IMPORTED_MODULE_1__","_part_js__WEBPACK_IMPORTED_MODULE_2__","_template_instance_js__WEBPACK_IMPORTED_MODULE_3__","_template_result_js__WEBPACK_IMPORTED_MODULE_4__","_template_js__WEBPACK_IMPORTED_MODULE_5__","isPrimitive","dirty","_createPart","AttributePart","l","text","isArray","iterator","t","_getValue","comitter","committer","commit","_pendingValue","ref","_insert","_commitText","_commitTemplateResult","_commitNode","_commitIterable","then","_commitPromise","clear","processor","fragment","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","setValue","Error","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","eventName","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","_options","getOptions","event","handleEvent","call","o","TemplateResult","SVGTemplateResult","_dom_js__WEBPACK_IMPORTED_MODULE_0__","_template_js__WEBPACK_IMPORTED_MODULE_1__","isTextBinding","close","lastIndexOf","replace","match","p1","p2","p3","innerHTML","getHTML","svgElement","templateCaches","_template_js__WEBPACK_IMPORTED_MODULE_0__","isDirective","directives","WeakMap","f","_parts_js__WEBPACK_IMPORTED_MODULE_1__","_template_factory_js__WEBPACK_IMPORTED_MODULE_2__","appendInto","TemplateInstance","_parts","importNode","_prepareInstance","handleTextExpression","insertAfterNode","handleAttributeExpressions","nodeName","adoptNode","upgrade"],"mappings":"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","file":"vendors~md-list~md-parentchild~md-story~md-view.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateResult } from './template-result.js';\nimport { Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected.` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.set(result.strings, template);\n    }\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (renderedDOM, template, scopeName) => {\n    shadyRenderSet.add(scopeName);\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    // If there are no styles, there's no work to do.\n    if (styles.length === 0) {\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < styles.length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    insertNodeIntoTemplate(template, condensedStyle, template.element.content.firstChild);\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n    if (window.ShadyCSS.nativeShadow) {\n        // When in native Shadow DOM, re-add styling to rendered content using\n        // the style ShadyCSS produced.\n        const style = template.element.content.querySelector('style');\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else {\n        // When not in native Shadow DOM, at this point ShadyCSS will have\n        // removed the style from the lit template and parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        template.element.content.insertBefore(condensedStyle, template.element.content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\nexport const render = (result, container, options) => {\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    litRender(result, container, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When rendering a TemplateResult, scope the template with ShadyCSS\n    if (container instanceof ShadowRoot && compatibleShadyCSSVersion &&\n        result instanceof TemplateResult) {\n        // Scope the element template one time only for this scope.\n        if (!shadyRenderSet.has(scopeName)) {\n            const part = parts.get(container);\n            const instance = part.value;\n            prepareTemplateStyles(container, instance.template, scopeName);\n        }\n        // Update styling if this is the initial render to this container.\n        if (!hasRendered) {\n            window.ShadyCSS.styleElement(container.host);\n        }\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// serializer/deserializers for boolean attribute\nconst fromBooleanAttribute = (value) => value !== null;\nconst toBooleanAttribute = (value) => value ? '' : null;\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = new Promise((resolve) => resolve(true));\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING = 1 << 3;\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're _finalized.\n        this._finalize();\n        const attributes = [];\n        for (const [p, v] of this._classProperties) {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        }\n        return attributes;\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty('_classProperties')) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n        this._classProperties.set(name, options);\n        // Allow user defined accessors by not replacing an existing own-property\n        // accessor.\n        if (this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            get() { return this[key]; },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestPropertyUpdate(name, oldValue, options);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     */\n    static _finalize() {\n        if (this.hasOwnProperty('_finalized') && this._finalized) {\n            return;\n        }\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (typeof superCtor._finalize === 'function') {\n            superCtor._finalize();\n        }\n        this._finalized = true;\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        const props = this.properties;\n        // support symbols in properties (IE11 does not support this)\n        const propKeys = [\n            ...Object.getOwnPropertyNames(props),\n            ...(typeof Object.getOwnPropertySymbols === 'function')\n                ? Object.getOwnPropertySymbols(props)\n                : []\n        ];\n        for (const p of propKeys) {\n            // note, use of `any` is due to TypeSript lack of support for symbol in\n            // index types\n            this.createProperty(p, props[p]);\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options !== undefined && options.attribute;\n        return attribute === false\n            ? undefined\n            : (typeof attribute === 'string'\n                ? attribute\n                : (typeof name === 'string' ? name.toLowerCase()\n                    : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's `type`\n     * or `type.fromAttribute` property option.\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options && options.type;\n        if (type === undefined) {\n            return value;\n        }\n        // Note: special case `Boolean` so users can use it as a `type`.\n        const fromAttribute = type === Boolean\n            ? fromBooleanAttribute\n            : (typeof type === 'function' ? type : type.fromAttribute);\n        return fromAttribute ? fromAttribute(value) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options === undefined || options.reflect === undefined) {\n            return;\n        }\n        // Note: special case `Boolean` so users can use it as a `type`.\n        const toAttribute = options.type === Boolean\n            ? toBooleanAttribute\n            : (options.type &&\n                options.type.toAttribute ||\n                String);\n        return toAttribute(value);\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this.renderRoot = this.createRenderRoot();\n        this._saveInstanceProperties();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        for (const [p] of this.constructor\n            ._classProperties) {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        }\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        for (const [p, v] of this._instanceProperties) {\n            this[p] = v;\n        }\n        this._instanceProperties = undefined;\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Uses ShadyCSS to keep element DOM updated.\n     */\n    connectedCallback() {\n        if ((this._updateState & STATE_HAS_UPDATED)) {\n            if (window.ShadyCSS !== undefined) {\n                window.ShadyCSS.styleElement(this);\n            }\n        }\n        else {\n            this.requestUpdate();\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() { }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attrValue = ctor._propertyValueToAttribute(value, options);\n        if (attrValue !== undefined) {\n            const attr = ctor._attributeNameForProperty(name, options);\n            if (attr !== undefined) {\n                // Track if the property is being reflected to avoid\n                // setting the property again via `attributeChangedCallback`. Note:\n                // 1. this takes advantage of the fact that the callback is synchronous.\n                // 2. will behave incorrectly if multiple attributes are in the reaction\n                // stack at time of calling. However, since we process attributes\n                // in `update` this should not be possible (or an extreme corner case\n                // that we'd like to discover).\n                // mark state reflecting\n                this._updateState = this._updateState | STATE_IS_REFLECTING;\n                if (attrValue === null) {\n                    this.removeAttribute(attr);\n                }\n                else {\n                    this.setAttribute(attr, attrValue);\n                }\n                // mark state not reflecting\n                this._updateState = this._updateState & ~STATE_IS_REFLECTING;\n            }\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (!(this._updateState & STATE_IS_REFLECTING)) {\n            const ctor = this.constructor;\n            const propName = ctor._attributeToPropertyMap.get(name);\n            if (propName !== undefined) {\n                const options = ctor._classProperties.get(propName);\n                this[propName] =\n                    ctor._propertyValueFromAttribute(value, options);\n            }\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        if (name !== undefined) {\n            const options = this.constructor\n                ._classProperties.get(name) ||\n                defaultPropertyDeclaration;\n            return this._requestPropertyUpdate(name, oldValue, options);\n        }\n        return this._invalidate();\n    }\n    /**\n     * Requests an update for a specific property and records change information.\n     * @param name {PropertyKey} name of requesting property\n     * @param oldValue {any} old value of requesting property\n     * @param options {PropertyDeclaration}\n     */\n    _requestPropertyUpdate(name, oldValue, options) {\n        if (!this.constructor\n            ._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n            return this.updateComplete;\n        }\n        // track old value when changing.\n        if (!this._changedProperties.has(name)) {\n            this._changedProperties.set(name, oldValue);\n        }\n        // add to reflecting properties set\n        if (options.reflect === true) {\n            if (this._reflectingProperties === undefined) {\n                this._reflectingProperties = new Map();\n            }\n            this._reflectingProperties.set(name, options);\n        }\n        return this._invalidate();\n    }\n    /**\n     * Invalidates the element causing it to asynchronously update regardless\n     * of whether or not any property changes are pending. This method is\n     * automatically called when any registered property changes.\n     */\n    async _invalidate() {\n        if (!this._hasRequestedUpdate) {\n            // mark state updating...\n            this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n            let resolver;\n            const previousValidatePromise = this._updatePromise;\n            this._updatePromise = new Promise((r) => resolver = r);\n            await previousValidatePromise;\n            this._validate();\n            resolver(!this._hasRequestedUpdate);\n        }\n        return this.updateComplete;\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    /**\n     * Validates the element by updating it.\n     */\n    _validate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        if (this.shouldUpdate(this._changedProperties)) {\n            const changedProperties = this._changedProperties;\n            this.update(changedProperties);\n            this._markUpdated();\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n        else {\n            this._markUpdated();\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. This getter can be implemented to\n     * await additional state. For example, it is sometimes useful to await a\n     * rendered element before fulfilling this Promise. To do this, first await\n     * `super.updateComplete` then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() { return this._updatePromise; }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated DOM in the element's\n     * `renderRoot`. Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            for (const [k, v] of this._reflectingProperties) {\n                this._propertyToAttribute(k, this[k], v);\n            }\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) { }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) { }\n}\n/**\n * Maps attribute names to properties; for example `foobar` attribute\n * to `fooBar` property.\n */\nUpdatingElement._attributeToPropertyMap = new Map();\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement._finalized = true;\n/**\n * Memoized list of all class properties, including any superclass properties.\n */\nUpdatingElement._classProperties = new Map();\nUpdatingElement.properties = {};\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n *\n * In TypeScript, the `tagName` passed to `customElement` must be a key of the\n * `HTMLElementTagNameMap` interface. To add your element to the interface,\n * declare the interface in this module:\n *\n *     @customElement('my-element')\n *     export class MyElement extends LitElement {}\n *\n *     declare global {\n *       interface HTMLElementTagNameMap {\n *         'my-element': MyElement;\n *       }\n *     }\n *\n */\nexport const customElement = (tagName) => (clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason. `Constructor<HTMLElement>`\n    // is helpful to make sure the decorator is applied to elements however.\n    return clazz;\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n */\nexport const property = (options) => (proto, name) => {\n    proto.constructor.createProperty(name, options);\n};\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n */\nexport const query = _query((target, selector) => target.querySelector(selector));\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n */\nexport const queryAll = _query((target, selector) => target.querySelectorAll(selector));\n/**\n * Base-implementation of `@query` and `@queryAll` decorators.\n *\n * @param queryFn exectute a `selector` (ie, querySelector or querySelectorAll)\n * against `target`.\n */\nfunction _query(queryFn) {\n    return (selector) => (proto, propName) => {\n        Object.defineProperty(proto, propName, {\n            get() { return queryFn(this.renderRoot, selector); },\n            enumerable: true,\n            configurable: true,\n        });\n    };\n}\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options) => (proto, name) => {\n    // This comment is here to fix a disagreement between formatter and linter\n    Object.assign(proto[name], options);\n};\n//# sourceMappingURL=decorators.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg } from 'lit-html/lit-html';\nexport class LitElement extends UpdatingElement {\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     * @returns {TemplateResult} Must return a lit-html TemplateResult.\n     */\n    render() { }\n}\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const comitter = new PropertyCommitter(element, name.slice(1), strings);\n            return comitter.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const comitter = new AttributeCommitter(element, name, strings);\n        return comitter.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport * from './lib/template-result.js';\nexport * from './lib/template.js';\nexport * from './lib/default-template-processor.js';\nexport * from './lib/template-instance.js';\nexport * from './lib/part.js';\nexport * from './lib/parts.js';\nexport * from './lib/dom.js';\nexport * from './lib/directive.js';\nexport * from './lib/render.js';\nexport * from './lib/template-factory.js';\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, not attribute positions,\n * in template.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\nexport const rewritesStyleAttribute = (() => {\n    const el = document.createElement('div');\n    el.setAttribute('style', '{{bad value}}');\n    return el.getAttribute('style') !== '{{bad value}}';\n})();\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        const _prepareTemplate = (template) => {\n            const content = template.content;\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                   NodeFilter.SHOW_TEXT */, null, false);\n            // The actual previous node, accounting for removals: if a node is removed\n            // it will never be the previousNode.\n            let previousNode;\n            // Used to set previousNode at the top of the loop.\n            let currentNode;\n            while (walker.nextNode()) {\n                index++;\n                previousNode = currentNode;\n                const node = currentNode = walker.currentNode;\n                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                    if (node.hasAttributes()) {\n                        const attributes = node.attributes;\n                        // Per\n                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                        // attributes are not guaranteed to be returned in document order.\n                        // In particular, Edge/IE can return them out of order, so we cannot\n                        // assume a correspondance between part index and attribute index.\n                        let count = 0;\n                        for (let i = 0; i < attributes.length; i++) {\n                            if (attributes[i].value.indexOf(marker) >= 0) {\n                                count++;\n                            }\n                        }\n                        while (count-- > 0) {\n                            // Get the template literal section leading up to the first\n                            // expression in this attribute\n                            const stringForPart = result.strings[partIndex];\n                            // Find the attribute name\n                            const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                            // Find the corresponding attribute\n                            // If the attribute name contains special characters, lower-case\n                            // it so that on XML nodes with case-sensitive getAttribute() we\n                            // can still find the attribute, which will have been lower-cased\n                            // by the parser.\n                            //\n                            // If the attribute name doesn't contain special character, it's\n                            // important to _not_ lower-case it, in case the name is\n                            // case-sensitive, like with XML attributes like \"viewBox\".\n                            const attributeLookupName = (rewritesStyleAttribute && name === 'style') ?\n                                'style$' :\n                                /^[a-zA-Z-]*$/.test(name) ? name : name.toLowerCase();\n                            const attributeValue = node.getAttribute(attributeLookupName);\n                            const strings = attributeValue.split(markerRegex);\n                            this.parts.push({ type: 'attribute', index, name, strings });\n                            node.removeAttribute(attributeLookupName);\n                            partIndex += strings.length - 1;\n                        }\n                    }\n                    if (node.tagName === 'TEMPLATE') {\n                        _prepareTemplate(node);\n                    }\n                }\n                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                    const nodeValue = node.nodeValue;\n                    if (nodeValue.indexOf(marker) < 0) {\n                        continue;\n                    }\n                    const parent = node.parentNode;\n                    const strings = nodeValue.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        parent.insertBefore((strings[i] === '') ? createMarker() :\n                            document.createTextNode(strings[i]), node);\n                        this.parts.push({ type: 'node', index: index++ });\n                    }\n                    parent.insertBefore(strings[lastIndex] === '' ?\n                        createMarker() :\n                        document.createTextNode(strings[lastIndex]), node);\n                    nodesToRemove.push(node);\n                }\n                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                    if (node.nodeValue === marker) {\n                        const parent = node.parentNode;\n                        // Add a new marker node to be the startNode of the Part if any of\n                        // the following are true:\n                        //  * We don't have a previousSibling\n                        //  * previousSibling is being removed (thus it's not the\n                        //    `previousNode`)\n                        //  * previousSibling is not a Text node\n                        //\n                        // TODO(justinfagnani): We should be able to use the previousNode\n                        // here as the marker node and reduce the number of extra nodes we\n                        // add to a template. See\n                        // https://github.com/PolymerLabs/lit-html/issues/147\n                        const previousSibling = node.previousSibling;\n                        if (previousSibling === null || previousSibling !== previousNode ||\n                            previousSibling.nodeType !== Node.TEXT_NODE) {\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        else {\n                            index--;\n                        }\n                        this.parts.push({ type: 'node', index: index++ });\n                        nodesToRemove.push(node);\n                        // If we don't have a nextSibling add a marker node.\n                        // We don't have to check if the next node is going to be removed,\n                        // because that node will induce a new marker if so.\n                        if (node.nextSibling === null) {\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        else {\n                            index--;\n                        }\n                        currentNode = previousNode;\n                        partIndex++;\n                    }\n                    else {\n                        let i = -1;\n                        while ((i = node.nodeValue.indexOf(marker, i + 1)) !== -1) {\n                            // Comment node has a binding marker inside, make an inactive part\n                            // The binding won't work, but subsequent bindings will\n                            // TODO (justinfagnani): consider whether it's even worth it to\n                            // make bindings in comments work\n                            this.parts.push({ type: 'node', index: -1 });\n                        }\n                    }\n                }\n            }\n        };\n        _prepareTemplate(element);\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !== undefined;\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => (value === null ||\n    !(typeof value === 'object' || typeof value === 'function'));\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (v != null &&\n                    (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n                else {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\nexport class AttributePart {\n    constructor(comitter) {\n        this.value = undefined;\n        this.committer = comitter;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Inserts this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n     * its next sibling must be static, unchanging nodes such as those that appear\n     * in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part._insert(this.startNode = createMarker());\n        part._insert(this.endNode = createMarker());\n    }\n    /**\n     * Appends this part after `ref`\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref._insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        const value = this._pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this._commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this._commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this._commitNode(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._commitIterable(value);\n        }\n        else if (value.then !== undefined) {\n            this._commitPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._commitText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this.value = value;\n    }\n    _commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.textContent = value;\n        }\n        else {\n            this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    _commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value && this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this._commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    _commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    _commitPromise(value) {\n        this.value = value;\n        value.then((v) => {\n            if (this.value === value) {\n                this.setValue(v);\n                this.commit();\n            }\n        });\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const value = !!this._pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        this.value = value;\n        this._pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const newListener = this._pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this, this._options);\n        }\n        this._options = getOptions(newListener);\n        if (shouldAddListener) {\n            this.element.addEventListener(this.eventName, this, this._options);\n        }\n        this.value = newListener;\n        this._pendingValue = noChange;\n    }\n    handleEvent(event) {\n        const listener = (typeof this.value === 'function') ?\n            this.value :\n            (typeof this.value.handleEvent === 'function') ?\n                this.value.handleEvent :\n                () => null;\n        listener.call(this.eventContext || this.element, event);\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { reparentNodes } from './dom.js';\nimport { lastAttributeNameRegex, marker, nodeMarker, rewritesStyleAttribute } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isTextBinding = true;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            html += s;\n            const close = s.lastIndexOf('>');\n            // We're in a text position if the previous string closed its last tag, an\n            // attribute position if the string opened an unclosed tag, and unchanged\n            // if the string had no brackets at all:\n            //\n            // \"...>...\": text position. open === -1, close > -1\n            // \"...<...\": attribute position. open > -1\n            // \"...\": no change. open === -1, close === -1\n            isTextBinding =\n                (close > -1 || isTextBinding) && s.indexOf('<', close + 1) === -1;\n            if (!isTextBinding && rewritesStyleAttribute) {\n                html = html.replace(lastAttributeNameRegex, (match, p1, p2, p3) => {\n                    return (p2 === 'style') ? `${p1}style$${p3}` : match;\n                });\n            }\n            html += isTextBinding ? nodeMarker : marker;\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        template = new Template(result, result.getTemplateElement());\n        templateCache.set(result.strings, template);\n    }\n    return template;\n}\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\nexport const directive = (f) => {\n    directives.set(f, true);\n    return f;\n};\nexport const isDirective = (o) => typeof o === 'function' && directives.has(o);\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this._parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // When using the Custom Elements polyfill, clone the node, rather than\n        // importing it, to keep the fragment in the template's document. This\n        // leaves the fragment inert so custom elements won't upgrade and\n        // potentially modify their contents by creating a polyfilled ShadowRoot\n        // while we traverse the tree.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        let partIndex = 0;\n        let nodeIndex = 0;\n        const _prepareInstance = (fragment) => {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            let node = walker.nextNode();\n            // Loop through all the nodes and parts of a template\n            while (partIndex < parts.length && node !== null) {\n                const part = parts[partIndex];\n                // Consecutive Parts may have the same node index, in the case of\n                // multiple bound attributes on an element. So each iteration we either\n                // increment the nodeIndex, if we aren't on a node with a part, or the\n                // partIndex if we are. By not incrementing the nodeIndex when we find a\n                // part, we allow for the next part to be associated with the current\n                // node if neccessasry.\n                if (!isTemplatePartActive(part)) {\n                    this._parts.push(undefined);\n                    partIndex++;\n                }\n                else if (nodeIndex === part.index) {\n                    if (part.type === 'node') {\n                        const part = this.processor.handleTextExpression(this.options);\n                        part.insertAfterNode(node);\n                        this._parts.push(part);\n                    }\n                    else {\n                        this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n                    }\n                    partIndex++;\n                }\n                else {\n                    nodeIndex++;\n                    if (node.nodeName === 'TEMPLATE') {\n                        _prepareInstance(node.content);\n                    }\n                    node = walker.nextNode();\n                }\n            }\n        };\n        _prepareInstance(fragment);\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map"],"sourceRoot":""}